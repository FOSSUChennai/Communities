name: Validate JSON Fields

on:
  pull_request_target:
    paths:
      - 'src/data/events.json'
      - 'src/data/communities.json'

permissions:
  contents: write
  pull-requests: write
  issues: write
  checks: write

jobs:
  validate-json-fields:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install dependencies
        run: |
          npm install -g jsonlint

      - name: Lint events.json
        id: lint-events
        run: |
          jsonlint -q src/data/events.json > events_lint_output.txt 2>&1
          if [ $? -ne 0 ]; then
            echo "events_lint_failed=true" >> $GITHUB_OUTPUT
            cat events_lint_output.txt >> $GITHUB_STEP_SUMMARY
          else
            echo "events_lint_failed=false" >> $GITHUB_OUTPUT
          fi

      - name: Lint communities.json
        id: lint-communities
        run: |
          jsonlint -q src/data/communities.json > communities_lint_output.txt 2>&1
          if [ $? -ne 0 ]; then
            echo "communities_lint_failed=true" >> $GITHUB_OUTPUT
            cat communities_lint_output.txt >> $GITHUB_STEP_SUMMARY
          else
            echo "communities_lint_failed=false" >> $GITHUB_OUTPUT
          fi

      - name: Check Modified Files
        id: check-modified-files
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });

            const eventsModified = files.some(file => file.filename === 'src/data/events.json');
            const communitiesModified = files.some(file => file.filename === 'src/data/communities.json');

            console.log(`Events modified: ${eventsModified}`);
            console.log(`Communities modified: ${communitiesModified}`);

            core.setOutput('events_modified', eventsModified.toString());
            core.setOutput('communities_modified', communitiesModified.toString());
      
      - name: Set environment variables for next steps
        run: |
          echo "EVENTS_MODIFIED=${{ steps.check-modified-files.outputs.events_modified }}" >> $GITHUB_ENV
          echo "COMMUNITIES_MODIFIED=${{ steps.check-modified-files.outputs.communities_modified }}" >> $GITHUB_ENV

      - name: Set additional environment variables
        run: |
          echo "EVENTS_LINT_FAILED=${{ steps.lint-events.outputs.events_lint_failed }}" >> $GITHUB_ENV
          echo "COMMUNITIES_LINT_FAILED=${{ steps.lint-communities.outputs.communities_lint_failed }}" >> $GITHUB_ENV

      - name: Comment on PR for Events Linting Failure
        if: env.EVENTS_LINT_FAILED == 'true' && env.EVENTS_MODIFIED == 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const lintOutput = fs.readFileSync('events_lint_output.txt', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '❌ **Events JSON Linting Failed**\n\n```\n' + lintOutput + '\n```\n\nPlease fix the JSON syntax in `src/data/events.json`.'
            });

      - name: Comment on PR for Events Linting Success
        if: env.EVENTS_LINT_FAILED == 'false' && env.EVENTS_MODIFIED == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '✅ **Events JSON Linting Passed**\n\nThe JSON syntax in `src/data/events.json` is valid.'
            });

      - name: Comment on PR for Communities Linting Failure
        if: env.COMMUNITIES_LINT_FAILED == 'true' && env.COMMUNITIES_MODIFIED == 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const lintOutput = fs.readFileSync('communities_lint_output.txt', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '❌ **Communities JSON Linting Failed**\n\n```\n' + lintOutput + '\n```\n\nPlease fix the JSON syntax in `src/data/communities.json`.'
            });

      - name: Comment on PR for Communities Linting Success
        if: env.COMMUNITIES_LINT_FAILED == 'false' && env.COMMUNITIES_MODIFIED == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '✅ **Communities JSON Linting Passed**\n\nThe JSON syntax in `src/data/communities.json` is valid.'
            });

      - name: Overall PR Summary and Approval
        id: approve-pr
        if: env.EVENTS_LINT_FAILED == 'false' && env.COMMUNITIES_LINT_FAILED == 'false'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Access the step outputs through the GitHub Actions environment variables
            const eventsModified = process.env.EVENTS_MODIFIED === 'true';
            const communitiesModified = process.env.COMMUNITIES_MODIFIED === 'true';
            
            let summaryMessage = '🎉 **JSON Checks Passed**\n\n';

            if (eventsModified) {
              summaryMessage += '- ✅ Events JSON Linting: Passed\n';
            }

            if (communitiesModified) {
              summaryMessage += '- ✅ Communities JSON Linting: Passed\n';
            }

            summaryMessage += '\nYour changes are ready to be merged!';

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summaryMessage
            });

            await github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              event: 'APPROVE',
              body: 'Automatically approved because all JSON validation and linting checks passed.'
            });

            core.setOutput('approved', 'true');

      - name: Auto Merge PR
        if: env.EVENTS_LINT_FAILED == 'false' && env.COMMUNITIES_LINT_FAILED == 'false'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            console.log(`Attempting to merge PR #${context.issue.number}`);

            let branchName;

            try {
              // First, get the PR information to retrieve the branch name and details
              const { data: prData } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number
              });
              
              // Save the branch name for later deletion
              branchName = prData.head.ref;
              console.log(`PR branch name: ${branchName}`);
              
              // Get PR files to identify which JSON files were modified
              const { data: files } = await github.rest.pulls.listFiles({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number
              });
              
              const fs = require('fs');
              
              // Check which JSON files were modified
              const eventsModified = files.some(file => file.filename === 'src/data/events.json');
              const communitiesModified = files.some(file => file.filename === 'src/data/communities.json');
              
              // Initialize variables for commit info
              let commitTitle = '';
              let commitMessage = 'This automated squash merge includes validated changes to JSON data files:\n\n';
              
              // Get specific details from the modified files
              if (eventsModified) {
                try {
                  // Read and parse the events.json file
                  const eventsData = JSON.parse(fs.readFileSync('src/data/events.json', 'utf8'));
                  
                  // We already have the files information from earlier, no need to fetch again
                  // The path parameter is not supported in the getFiles method
                  
                  // Extract event information for commit message
                  const eventTitles = eventsData
                    .filter(event => new Date(event.startDate) >= new Date()) // Future events
                    .slice(0, 3) // Limit to 3 events to keep message reasonable
                    .map(event => `"${event.title}"`);
                  
                  // Add event-specific information to commit message
                  if (eventTitles.length > 0) {
                    commitMessage += `• Updated events including ${eventTitles.join(', ')}\n`;
                    if (eventTitles.length === 1) {
                      commitTitle = `Add ${eventTitles[0]} event in PR #${context.issue.number}`;
                    } else {
                      commitTitle = `Add ${eventTitles.length} events in PR #${context.issue.number}`;
                    }
                  } else {
                    commitMessage += `• Updated events.json with event information\n`;
                    commitTitle = `Update events data in PR #${context.issue.number}`;
                  }
                } catch (error) {
                  console.log(`Error parsing events.json: ${error.message}`);
                  commitMessage += `• Updated events.json with new community event information\n`;
                  if (!commitTitle) {
                    commitTitle = `Update events data in PR #${context.issue.number}`;
                  }
                }
              }
              
              if (communitiesModified) {
                try {
                  // Read and parse the communities.json file
                  const communitiesData = JSON.parse(fs.readFileSync('src/data/communities.json', 'utf8'));
                  
                  // Extract community names for commit message
                  const communityNames = communitiesData
                    .slice(0, 3) // Limit to 3 communities to keep message reasonable
                    .map(community => `"${community.name}"`);
                  
                  // Add community-specific information to commit message
                  if (communityNames.length > 0) {
                    commitMessage += `• Updated communities including ${communityNames.join(', ')}\n`;
                    if (!eventsModified) {
                      if (communityNames.length === 1) {
                        commitTitle = `Add ${communityNames[0]} community in PR #${context.issue.number}`;
                      } else {
                        commitTitle = `Update ${communityNames.length} communities in PR #${context.issue.number}`;
                      }
                    }
                  } else {
                    commitMessage += `• Updated communities.json with community information\n`;
                    if (!commitTitle) {
                      commitTitle = `Update communities data in PR #${context.issue.number}`;
                    }
                  }
                } catch (error) {
                  console.log(`Error parsing communities.json: ${error.message}`);
                  commitMessage += `• Updated communities.json with new community information\n`;
                  if (!commitTitle) {
                    commitTitle = `Update communities data in PR #${context.issue.number}`;
                  }
                }
              }
              
              // Default title if needed
              if (!commitTitle) {
                if (eventsModified && communitiesModified) {
                  commitTitle = `Update events and communities data in PR #${context.issue.number}`;
                } else {
                  commitTitle = `Update JSON data files in PR #${context.issue.number}`;
                }
              }
              
              // Add validation information
              commitMessage += '\nAll JSON validation and linting checks have passed successfully.';
              
              // Add PR title and description for additional context
              if (prData.title) {
                commitMessage += `\n\nOriginal PR: "${prData.title}"`;
              }
              
              // Merge the PR using squash method with enhanced commit info
              try {
                await github.rest.pulls.merge({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: context.issue.number,
                  merge_method: 'squash',
                  commit_title: commitTitle,
                  commit_message: commitMessage
                });
                console.log(`Successfully merged PR #${context.issue.number}`);
              } catch (mergeError) {
                // Handle permission issues
                console.log(`Error merging PR: ${mergeError.message}`);
                
                // Create a comment instead of failing entirely
                await github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: '✅ **All JSON validation checks passed!**\n\nThis PR is ready to be merged, but the automated merge failed due to permissions.\n\nPlease ask a repository maintainer to merge this PR manually.'
                });
                
                // Don't fail the workflow
                console.log('Created comment requesting manual merge');
              }
              
            } catch (error) {
              console.log(`Failed to process PR #${context.issue.number}`);
              console.log(error);
              
              // Create a comment about the error
              try {
                await github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: `⚠️ **JSON validation passed, but there was an issue with automatic processing**\n\nAn error occurred: ${error.message}\n\nA repository maintainer should review this PR manually.`
                });
              } catch (commentError) {
                console.log(`Failed to create error comment: ${commentError.message}`);
              }
              
              // Don't fail the workflow completely if only the merge part failed
              if (error.message.includes('Resource not accessible by integration')) {
                console.log('Continuing workflow despite merge permission error');
              } else {
                core.setFailed(`Failed to process PR: ${error.message}`);
              }
            }

      - name: Fail workflow if validation failed
        if: env.EVENTS_LINT_FAILED == 'true' || env.COMMUNITIES_LINT_FAILED == 'true'
        run: exit 1
